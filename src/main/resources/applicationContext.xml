<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		    http://www.springframework.org/schema/context
		    http://www.springframework.org/schema/context/spring-context.xsd
		    http://www.springframework.org/schema/beans
		    http://www.springframework.org/schema/beans/spring-beans.xsd
		  	http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc.xsd 
		    http://www.springframework.org/schema/tx
		    http://www.springframework.org/schema/tx/spring-tx.xsd
		    http://www.springframework.org/schema/cache
		    http://www.springframework.org/schema/cache/spring-cache.xsd
		    http://www.springframework.org/schema/aop
		    http://www.springframework.org/schema/aop/spring-aop.xsd">

	<mvc:annotation-driven/>
	<context:component-scan base-package="com.bailian" />


	
    <!-- 引入配置文件 -->
    <!-- kafka -->
	<context:property-placeholder location="classpath:*.properties"/>
<!-- 	<bean id="kafkaConf" class="com.bailian.kafka.KafkaConf">
	<property name="bootstrap_servers" value="${bootstrap.servers}"/>
		<property name="metadata_broker_list" value="${metadata.broker.list}"/>
		<property name="kafka_write_num" value="${kafka.write.num}"/>
		<property name="kafka_cache_size" value="${kafka.cache.size}"/>
	</bean>
 -->		
	<!-- 	<context:property-placeholder location="classpath:jdbc.properties"/>--> 
   <!-- dataSource 配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${ds.initialSize}"/>
        <property name="minIdle" value="${ds.minIdle}"/>
        <property name="maxActive" value="${ds.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${ds.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath:com/bailian/dao/mapper/*.xml"/>

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="com.bailian.dao"
          p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>
	  
	  
	  	<!--  jediscluster -->
	<bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig" >
			<property name="maxWaitMillis" value="-1" />
			<property name="maxTotal" value="1000" />
			<property name="minIdle" value="8" />
			<property name="maxIdle" value="100" />
	</bean>

	<bean id="jedisCluster" class="com.bailian.redis.JedisClusterFactory">
		<property name="addressConfig">
			<value>classpath:connect-redis.properties</value>
		</property>
		<property name="addressKeyPrefix" value="address" />   <!--  属性文件里  key的前缀 -->
		<property name="timeout" value="300000" />
		<property name="maxRedirections" value="6" />
		<property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" />
	</bean>
	
	
	
	<!-- A.配置调度的任务对应bean的id和自定义class -->
 	<bean id="myQuartz" class="com.bailian.task.Quartz" />
	<bean id="confDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="myQuartz" />
		<property name="targetMethod" value="loadConfiguration" />
		<property name="concurrent" value="false" />
	</bean>

<!-- 	<bean id="promDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="myQuartz" />
		<property name="targetMethod" value="loadPromotion" />
		<property name="concurrent" value="false" />
	</bean> -->

	
	<bean id="dayTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="confDetail" />
		<property name="cronExpression">
			<value>0 0 23 * * ?</value>
		</property>
	</bean>

<!-- 	<bean id="hourTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="promDetail" />
		<property name="cronExpression">
			<value>0 0 * * * ?</value>
		</property>
	</bean> -->
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="dayTrigger" />
				<!-- <ref bean="hourTrigger" /> -->
			</list>
		</property>
	</bean> 

	
</beans>
